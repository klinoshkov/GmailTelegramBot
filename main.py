import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from datetime import datetime
from google.auth.transport.requests import Request
from flask import Flask

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ DEBUG
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GMAIL_SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']
CHECK_INTERVAL = 60

# Flask HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

class GmailBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        self.setup_handlers()
        self.last_check_time = datetime.now()
        self.known_messages = set()
        self.creds = None  # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.chat_id = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("check", self.check_now))
        self.application.add_error_handler(self.error_handler)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
        self.chat_id = update.effective_chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–¥–æ–º–∏—Ç —Ç–µ–±—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö.\n'
            '–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gmail...'
        )

        try:
            # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            self.creds = self.authorize_google()
            if self.creds:
                await update.message.reply_text('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Gmail!')
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã
                context.application.job_queue.run_repeating(
                    self.check_mail_job, 
                    interval=CHECK_INTERVAL, 
                    first=0,
                    chat_id=self.chat_id
                )
            else:
                await update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gmail')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Gmail: {str(e)}')

    async def check_now(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /check")
        await update.message.reply_text('–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É...')
        await self.check_mail_job(context)

    def authorize_google(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Gmail API"""
        logger.debug("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Google")
        creds = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ token.json
        if os.path.exists('token.json'):
            logger.debug("–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π token.json")
            try:
                creds = Credentials.from_authorized_user_file('token.json', GMAIL_SCOPES)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ token.json: {str(e)}")
                creds = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å credentials
        if not creds or not creds.valid:
            logger.debug("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            if creds and creds.expired and creds.refresh_token:
                logger.debug("–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
                try:
                    creds.refresh(Request())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
                    creds = None
            else:
                logger.debug("–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                try:
                    flow = InstalledAppFlow.from_client_secrets_file(
                        'credentials.json', GMAIL_SCOPES)
                    creds = flow.run_local_server(port=0)
                    logger.debug("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
                    creds = None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ credentials
            try:
                with open('token.json', 'w') as token:
                    token.write(creds.to_json())
                logger.debug("–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ token.json")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

        return creds

    async def check_mail_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã"""
        logger.debug("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã")
        try:
            if not self.creds:
                self.creds = self.authorize_google()

            if self.creds:
                service = build('gmail', 'v1', credentials=self.creds)
                results = service.users().messages().list(
                    userId='me',
                    maxResults=10,
                    q='is:unread'
                ).execute()

                messages = results.get('messages', [])
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")

                for message in messages:
                    logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: {message['id']}")
                    if message['id'] not in self.known_messages:
                        msg = service.users().messages().get(
                            userId='me',
                            id=message['id']
                        ).execute()

                        headers = msg['payload']['headers']
                        subject = next(
                            (h['value'] for h in headers if h['name'] == 'Subject'),
                            '–ë–µ–∑ —Ç–µ–º—ã'
                        )
                        sender = next(
                            (h['value'] for h in headers if h['name'] == 'From'),
                            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'
                        )

                        notification_text = (
                            f"üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ!\n"
                            f"–û—Ç: {sender}\n"
                            f"–¢–µ–º–∞: {subject}"
                        )

                        if self.chat_id:
                            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {self.chat_id}")
                            await context.bot.send_message(
                                chat_id=self.chat_id,
                                text=notification_text
                            )

                        self.known_messages.add(message['id'])
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {str(e)}")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞")
        self.application.run_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    from threading import Thread
    server = Thread(target=lambda: app.run(host='0.0.0.0', port=8080))
    server.start()

    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    bot = GmailBot()
    bot.run()
